#define _XOPEN_SOURCE 500 /* Enable certain library functions (strdup) on linux.  See feature_test_macros(7) */
 
#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <string.h>

/* Tag of each block in cache.*/
#define DIRTY 0
#define CLEAN 1
#define BLOCKSIZE 57 // to be deleted.
struct inode {
    short type;			/* file type (e.g., directory or regular) */
    short nlink;		/* number of hard links to inode */
    int   size;			/* file size in bytes */
    int   direct[16];	/* block numbers for 1st 13 blocks */
    int   indirect;		/* block number of indirect block */
};
 
 /* the node in inode cache */
struct entry_s {
	int tag;  // 0 dirty; 1 clean
	int key;
	struct inode value;
	struct entry_s *next;
};
typedef struct entry_s entry_t;

/* the node in block cache */
struct _b_node {
	int tag; // 0 dirty; 1 clean
	int key;
	char data[BLOCKSIZE]; // BLOCKSIZE defined in filesystem.h
	struct _b_node *next;
};
typedef struct _b_node b_node;
 
struct hashtable_s {
	int size;
	int counter;
	struct entry_s **table;	
};
 
typedef struct hashtable_s hashtable_t;
 
/* Create a new hashtable. */
hashtable_t *ht_create( int size ) {
 
	hashtable_t *hashtable = NULL;
	int i;
 
	if( size < 1 ) return NULL;
 
	/* Allocate the table itself. */
	if( ( hashtable = malloc( sizeof( hashtable_t ) ) ) == NULL ) {
		return NULL;
	}
 
	/* Allocate pointers to the head nodes. */
	if( ( hashtable->table = malloc( sizeof( entry_t * ) * size ) ) == NULL ) {
		return NULL;
	}
	for( i = 0; i < size; i++ ) {
		hashtable->table[i] = NULL;
	}
 
	hashtable->size = size;
	hashtable->counter = 0;
 
	return hashtable;	
}
 
/* Hash a string for a particular hash table. */
int ht_hash( hashtable_t *hashtable, int key) {
 	
	return key % hashtable->size;
}
 
/* Create a key-value pair for inode cache. */
entry_t *ht_newpair_inode( int key, struct inode *value ) {

	entry_t *newpair;
 
	if( ( newpair = malloc( sizeof( entry_t ) ) ) == NULL ) {
		return NULL;
	}
 
	newpair->key = key;

	if(value == NULL)
		return NULL;

	/*newpair->value = *value;*/
	newpair->value.type = value->type;			/* file type (e.g., directory or regular) */
    newpair->value.nlink = value->nlink;		/* number of hard links to inode */
    newpair->value.size = value->size;			/* file size in bytes */
    memcpy(newpair->value.direct, value->direct, 16*sizeof(int));	/* block numbers for 1st 13 blocks */
    newpair->value.indirect = value->indirect;		/* block number of indirect block */
 
	newpair->next = NULL;
 
	return newpair;
}

/* Create a key-value pair for block cache. */
b_node *ht_newpair_block(int key, char * data)
{
	b_node *newpair;

	if(newpair = malloc( sizeof(b_node)) == NULL)
	{
		return NULL;
	}

	newpair->key = key;

	if(data == NULL)
		return NULL;

	/* Assign value to newpair */
	memcpy(newpair->data, data, BLOCKSIZE);

	newpair->next = NULL;

	return newpair;
}

 
/* Insert a key-value pair into inode table. */
int ht_set_inode( hashtable_t *hashtable, int key, struct inode *value ) {

	int bin = 0;
	entry_t *newpair = NULL;
	entry_t *next = NULL;
	entry_t *last = NULL;
 
	bin = ht_hash( hashtable, key );
	next = hashtable->table[ bin ];
	while( next != NULL && next->key != NULL &&  key > next->key ) {
		last = next;
		next = next->next;
	}

	/* There's already a pair.  Let's replace that string. */
	if( next != NULL && next->key != NULL && key == next->key) {
 
		/* Cover the old value. next->value = value;*/
		next->tag = DIRTY;
		next->value.type = value->type;			
    	next->value.nlink = value->nlink;		
    	next->value.size = value->size;			
    	memcpy(next->value.direct, value->direct, 16*sizeof(int));	
    	next->value.indirect = value->indirect;	
 
	/* Nope, could't find it.  Time to grow a pair. */
	} else {
		printf("\nHashtable counter %d \n", hashtable->counter);
		if(hashtable->counter >= hashtable->size)
		{
			printf("Hashtbale overflow.\n");
			return -1;
		}
			
		hashtable->counter++;
		newpair = ht_newpair_inode( key, value);
		newpair->tag = CLEAN;
 
		/* We're at the start of the linked list in this bin. */
		if( next == hashtable->table[ bin ] ) {
			newpair->next = next;
			hashtable->table[ bin ] = newpair;
	
		/* We're at the end of the linked list in this bin. */
		} else if ( next == NULL ) {
			last->next = newpair;
	
		/* We're in the middle of the list. */
		} else  {
			newpair->next = next;
			last->next = newpair;
		}
	}
	return 0;
}

/* Insert a key-value pair into block cache. */
int ht_set_block( hashtable_t *hashtable, int key, char * data ) {

	int bin = 0;
	b_node *newpair = NULL;
	b_node *next = NULL;
	b_node *last = NULL;
 
	bin = ht_hash( hashtable, key );
	next = hashtable->table[ bin ];
	while( next != NULL && next->key != NULL &&  key > next->key ) {
		last = next;
		next = next->next;
	}

	/* There's already a pair.  Let's replace that string. */
	if( next != NULL && next->key != NULL && key == next->key) {
 
		/* Cover the old value. next->value = value;*/
		next->tag = DIRTY;
		memcpy(next->data, data, BLOCKSIZE);
 
	/* Nope, could't find it.  Time to grow a pair. */
	} else {
		printf("\nHashtable counter %d \n", hashtable->counter);
		if(hashtable->counter >= hashtable->size)
		{
			printf("Hashtbale overflow.\n");
			return -1;
		}
			
		hashtable->counter++;
		newpair = ht_newpair_block( key, data);
		newpair->tag = CLEAN;
 
		/* We're at the start of the linked list in this bin. */
		if( next == hashtable->table[ bin ] ) {
			newpair->next = next;
			hashtable->table[ bin ] = newpair;
	
		/* We're at the end of the linked list in this bin. */
		} else if ( next == NULL ) {
			last->next = newpair;
	
		/* We're in the middle of the list. */
		} else  {
			newpair->next = next;
			last->next = newpair;
		}
	}
	return 0;
}


/* Delete a key-value pair from a hash table.*/
int ht_evict_inode(hashtable_t *hashtable, int key, struct inode *pointer)
{
	/* Judge if the key is in hashtable, if not, do nothing; if exsits, delete it.*/
	int bin = 0;
	entry_t *pre = NULL;
	entry_t *cur = NULL;

	bin = ht_hash( hashtable, key );
 
	pre = hashtable->table[ bin -1];
	cur = hashtable->table[ bin ];

	while( cur != NULL && cur->key != NULL &&  key > cur->key ) {
			pre = cur;
			cur = cur->next;
			/* Nope, could't find it.  Time to grow a pair. */
			/* do nothing.*/
			return -1; // if hashtable doesn't contain the key, then it cannot delete it. return -1.
	}

		if( cur != NULL && cur->key != NULL && key == cur->key) {
			pointer->type = cur->value.type;			/* file type (e.g., directory or regular) */
    		pointer->nlink = cur->value.nlink;		/* number of hard links to inode */
    		pointer->size = cur->value.size;			/* file size in bytes */
    		memcpy(pointer->direct, cur->value.direct, 16*sizeof(int));	/* block numbers for 1st 13 blocks */
    		pointer->indirect = cur->value.indirect;		/* block number of indirect block */

			hashtable->counter--;
			pre = cur->next;
			free( cur );
			if(pre == NULL || pre->next == NULL)
			{
				printf("pre next is null.\n");
			}
			else
			{
				cur = pre->next;
			}
			printf("reach here3.\n");
			printf("Deleted! \n");
		}
		return 0;

}
 
/* Retrieve a key-value pair from inode cache. */
int ht_get_inode( hashtable_t *hashtable, int key, struct inode * pointer) {


	int bin = 0;
	entry_t *pair;
 
	bin = ht_hash( hashtable, key );
 
	/* Step through the bin, looking for our value. */
	pair = hashtable->table[ bin ];
	while( pair != NULL && pair->key != NULL && key > pair->key ) {
		pair = pair->next;
	}
 
	/* Did we actually find anything? */
	if( pair == NULL || pair->key == NULL || key != pair->key ) {
		return -1;
 
	} else {
		pointer->type = pair->value.type;			/* file type (e.g., directory or regular) */
    	pointer->nlink = pair->value.nlink;		/* number of hard links to inode */
    	pointer->size = pair->value.size;			/* file size in bytes */
    	memcpy(pointer->direct, pair->value.direct, 16*sizeof(int));	/* block numbers for 1st 13 blocks */
    	pointer->indirect = pair->value.indirect;		/* block number of indirect block */
		return 0;
	}
	
} 

/* Retrieve a key-value pair from block cache. */
int ht_get_block( hashtable_t *hashtable, int key, char * pointer) {


	int bin = 0;
	b_node *pair;
 
	bin = ht_hash( hashtable, key );
 
	/* Step through the bin, looking for our value. */
	pair = hashtable->table[ bin ];
	while( pair != NULL && pair->key != NULL && key > pair->key ) {
		pair = pair->next;
	}
 
	/* Did we actually find anything? */
	if( pair == NULL || pair->key == NULL || key != pair->key ) {
		return -1;
 
	} else {
		memcpy(pointer, pair->data, BLOCKSIZE);
		return 0;
	}
	
} 

 
int main( int argc, char **argv ) { //test methods for blcok cache
 
 // 	printf("reach 0.");
	// hashtable_t *hashtable = ht_create( 4);

	// printf("reach 00.");
	// struct inode * inode1 = (struct inode *)malloc(sizeof(struct inode));
	// inode1->size = 10;

	// struct inode * inode2 = (struct inode *)malloc(sizeof(struct inode));
	// inode2->size = 20;

	// struct inode * inode3 = (struct inode *)malloc(sizeof(struct inode));
	// inode3->size = 30;

	// struct inode * inode4 = (struct inode *)malloc(sizeof(struct inode));
	// inode4->size = 40;

	// // struct inode * inode5 = (struct inode *)malloc(sizeof(struct inode));
	// // inode5->size = 50;
 
 // 	printf("reach 1.");
 // 	printf("The size of hashtbale %d \n", hashtable->size);
	// ht_set_inode( hashtable, 1, inode1 );
	// ht_set_inode( hashtable, 2, inode2 );
	// ht_set_inode( hashtable, 3, inode3 );
	// ht_set_inode( hashtable, 4, inode4 );
	// //ht_set( hashtable, 5, inode5 );

	// printf("reach 2.");

	
 // 	struct inode * inode5 = (struct inode *)malloc(sizeof(struct inode));
	// int i =  ht_get_inode( hashtable, 1, inode5);
	// printf( "\ntest ht get %d\n", i);
	// printf( "%d\n", inode5->size);
	// // printf( "%d\n", ht_get( hashtable, 2)->size );
	// // printf( "%d\n", ht_get( hashtable, 3)->size );
	// // printf( "%d\n", ht_get( hashtable, 4)->size );
	// //printf( "%d\n", ht_get( hashtable, 5)->size );

	// struct inode * inode6 = (struct inode *)malloc(sizeof(struct inode));
	// i = ht_evict_inode(hashtable, 2, inode6);
	// printf( "test ht delete %d\n", i);
	// printf( "%d\n", inode6->size);
 // 	//printf( "%d\n", ht_get( hashtable, 5)->size );

	hashtable_t *ht = ht_create( 8 );
 	b_node * i1 = (b_node *)malloc(sizeof(b_node));
 	i1->tag = 1;
 	// b_node * i2 = (b_node *)malloc(sizeof(b_node));
 	// i2->tag = 2;
 	// b_node * i3 = (b_node *)malloc(sizeof(b_node));
 	// i3->tag = 3;
 	// b_node * i4 = (b_node *)malloc(sizeof(b_node));
 	// i4->tag = 4;
 	// b_node * i5 = (b_node *)malloc(sizeof(b_node));
 	// i5->tag = 5;
 	ht_set_block(ht, 1, i1);
 	// ht_set_block(ht, 2, i2);
 	// ht_set_block(ht, 3, i3);
 	// ht_set_block(ht, 4, i4);

 	b_node * i6 = (b_node *)malloc(sizeof(b_node));
 	ht_get_block(ht, 1, i6);
 	printf( "%d\n", i6->tag);

	return 0;
}
