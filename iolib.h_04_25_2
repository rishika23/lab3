/*
 *  External definitions for the Yalnix File System user interface
 */

#ifndef _iolib_h
#define _iolib_h

#include <sys/types.h>
#include <comp421/filesystem.h>
#include<comp421/yalnix.h>

#ifdef __cplusplus
extern "C" {
#endif

/*
 *  The values used for 'whence' on a Seek call:
 */
#define	SEEK_SET	0	/* Set position to 'offset' */
#define	SEEK_CUR	1	/* Set position to current plus 'offset' */
#define	SEEK_END	2	/* Set position to EOF plus 'offset' */

/*
 *  The structure used to return information on a Stat call:
 */
struct Stat {
    int inum;		/* inode number of file */
    int type;		/* type of file (e.g., INODE_REGULAR) */
    int size;		/* size of file in bytes */
    int nlink;		/* link count of file */
};
struct seek_struct{

	int curr_offset;
	int whence;
	int new_offset;

	};

struct my_msg{
       int type;       // 1 by default when leaving iolib; after returning from server, if success, 0; otherwise -1;
       int data2;      // Used to get/send inode number
       char data3[16]; // Used to format the message into 32 bytes.
       void *ptr;      // Generally, it's pathname; In special cases, it's a pointer of a struct specifically defined for some method.
};

/* Specifically in Read and Write. Will be passed between iolib and server by void *prt in my_msg. */
struct read_struct
{	
	int offset;  // Current position in this file.
	int len;     // The actual number of chars being read or writen.
	void *buff;  // The address to begin read or write.
	char str[16];// Not used. Redundanct design.
};

/* Specifically used for Stat method. Will be passed between iolib and server by void *prt in my_msg.*/
struct stat_struct
{
	struct stat_struct * statbuf;   // Contains the infomation of one file. It is provided.
	char pathname[MAXPATHNAMELEN];  // Pathname of the file.
};

/* Specifically used for Link and SymLink. Will be passed between iolib and server by void *prt in my_msg.*/
struct old_new
{
	char oldname[MAXPATHNAMELEN];  // new file's name
	char newname[MAXPATHNAMELEN];  // old file's name
};

/* Specifically used for ReadLink. */
struct readlink
{
	char pathname[MAXPATHNAMELEN];  // File's pathname
	char *buf;                      // The begining of the buffer.
	int len;                        // Maximum number of characters.

};



#define OPEN 1
#define CLOSE 2
#define CREATE 3
#define READ 4
#define WRITE 5
#define SEEK 6
#define LINK 7
#define UNLINK 8
#define SYMLINK 9
#define READLINK 10
#define MKDIR 11
#define RMDIR 12
#define CHDIR 13
#define STAT 14
#define SYNC 15
#define SHUTDOWN 16


/*
 *  Function prototypes for YFS calls:
 */

extern int Open(char *);
extern int Close(int);
extern int Create(char *);
extern int Read(int, void *, int);
extern int Write(int, void *, int);
extern int Seek(int, int, int);
extern int Link(char *, char *);
extern int Unlink(char *);
extern int SymLink(char *, char *);
extern int ReadLink(char *, char *, int);
extern int MkDir(char *);
extern int RmDir(char *);
extern int ChDir(char *);
extern int Stat(char *, struct Stat *);
extern int Sync(void);
extern int Shutdown(void);

#ifdef __cplusplus
}
#endif

#endif /* _iolib_h */
